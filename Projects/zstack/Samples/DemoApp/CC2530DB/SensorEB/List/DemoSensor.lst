###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                30/Mar/2016  12:04:34
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\Source\DemoSensor.c
#    Command line       =  
#        -f
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00200000 -DZDAPP_CONFIG_PAN_ID=0x0EAE
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=TRUE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\Source\DemoSensor.c
#        -D NWK_AUTO_POLL -D HOLD_AUTO_START -D POWER_SAVING -D NV_INIT -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ENDDEVICE -lC
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\SensorEB\List\
#        -lA
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\SensorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\SensorEB\Obj\
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Oh --require_prototypes
#    List file          =  
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\SensorEB\List\DemoSensor.lst
#    Object file        =  
#        C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\CC2530DB\SensorEB\Obj\DemoSensor.r51
#
###############################################################################

C:\Users\Tijmen\Documents\ZigbeeProject\Projects\zstack\Samples\DemoApp\Source\DemoSensor.c
      1          /**************************************************************************************************
      2            Filename:       DemoSensor.c
      3          
      4            Description:    Sensor application for the sensor demo utilizing the Simple API.
      5          
      6                            The sensor node is a ZigBee end device.
      7                            The sensor application binds to a gateway and will periodically
      8                            read temperature and supply voltage from the ADC and send report
      9                            towards the gateway node.
     10          
     11          
     12            Copyright 2009 Texas Instruments Incorporated. All rights reserved.
     13          
     14            IMPORTANT: Your use of this Software is limited to those specific rights
     15            granted under the terms of a software license agreement between the user
     16            who downloaded the software, his/her employer (which must be your employer)
     17            and Texas Instruments Incorporated (the "License").  You may not use this
     18            Software unless you agree to abide by the terms of the License. The License
     19            limits your use, and you acknowledge, that the Software may not be modified,
     20            copied or distributed unless embedded on a Texas Instruments microcontroller
     21            or used solely and exclusively in conjunction with a Texas Instruments radio
     22            frequency transceiver, which is integrated into your product.  Other than for
     23            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     24            works of, modify, distribute, perform, display or sell this Software and/or
     25            its documentation for any purpose.
     26          
     27            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     28            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     29            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     30            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     31            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     32            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     33            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     34            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     35            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     36            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     37            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     38          
     39            Should you have any questions regarding your right to use this Software,
     40            contact Texas Instruments Incorporated at www.TI.com.
     41          **************************************************************************************************/
     42          
     43          /******************************************************************************
     44           * INCLUDES
     45           */
     46          
     47          #include "ZComDef.h"
     48          #include "OSAL.h"
     49          #include "sapi.h"
     50          #include "hal_key.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     51          #include "hal_lcd.h"
     52          #include "hal_led.h"
     53          #include "hal_adc.h"
     54          #include "hal_mcu.h"
     55          #include "hal_uart.h"
     56          #include "DemoApp.h"
     57          
     58          /******************************************************************************
     59           * CONSTANTS
     60           */
     61          #define REPORT_FAILURE_LIMIT                4
     62          #define ACK_REQ_INTERVAL                    5 // each 5th packet is sent with ACK request
     63          
     64          // Application States
     65          #define APP_INIT                            0    // Initial state
     66          #define APP_START                           1    // Sensor has joined network
     67          #define APP_BIND                            2    // Sensor is in process of binding
     68          #define APP_REPORT                          4    // Sensor is in reporting state
     69          
     70          // Application osal event identifiers
     71          // Bit mask of events ( from 0x0000 to 0x00FF )
     72          #define MY_START_EVT                        0x0001
     73          #define MY_REPORT_EVT                       0x0002
     74          
     75          #define MY_FIND_COLLECTOR_EVT               0x0004
     76          
     77          // ADC definitions for CC2430/CC2530 from the hal_adc.c file
     78          #if defined (HAL_MCU_CC2530)
     79          #define HAL_ADC_REF_125V    0x00    /* Internal 1.25V Reference */
     80          #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
     81          #define HAL_ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
     82          #define HAL_ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
     83          #define HAL_ADC_CHN_VDD3    0x0f    /* Input channel: VDD/3 */
     84          #define HAL_ADC_CHN_TEMP    0x0e    /* Temperature sensor */
     85          #endif // HAL_MCU_CC2530
     86          
     87          /******************************************************************************
     88           * TYPEDEFS
     89           */
     90          
     91          /******************************************************************************
     92           * LOCAL VARIABLES
     93           */
     94          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          static uint8 appState =           APP_INIT;
   \                     appState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     96          static uint8 reportState =        FALSE;
   \                     reportState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     97          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          static uint8 reportFailureNr =    0;
   \                     reportFailureNr:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          static uint8  counter =           0;
   \                     counter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    100          static uint16 myReportPeriod =    5000;        // milliseconds
   \                     myReportPeriod:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myReportPeriod>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    101          static uint16 myBindRetryDelay =  2000;        // milliseconds
   \                     myBindRetryDelay:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myBindRetryDelay>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    102          static uint8 myStartRetryDelay =    10;        // milliseconds
   \                     myStartRetryDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for myStartRetryDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
    103          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          static uint16 parentShortAddr;
   \                     parentShortAddr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    105          /*
    106          
    107          output: Door is open/closed
    108          input: Close/open door
    109          #define NUM_OUT_DOOR_COLLECTOR
    110          #define NUM_IN_DOOOR_COLLECTOR
    111          
    112          */
    113          /******************************************************************************
    114           * GLOBAL VARIABLES
    115           */
    116          
    117          // Inputs and Outputs for Sensor device
    118          #define NUM_OUT_CMD_SENSOR                1
    119          #define NUM_IN_CMD_SENSOR                 1
    120          
    121          // List of output and input commands for Sensor device

   \                                 In  segment XDATA_ROM_C, align 1
    122          const cId_t zb_OutCmdList[NUM_OUT_CMD_SENSOR] =
   \                     zb_OutCmdList:
   \   000000   0400         DW 4
    123          {
    124            DOOR_BUTTON_CMD_ID
    125          };
    126          // List of output and input commands for Sensor device

   \                                 In  segment XDATA_ROM_C, align 1
    127          const cId_t zb_InCmdList[NUM_OUT_CMD_SENSOR] =
   \                     zb_InCmdList:
   \   000000   0300         DW 3
    128          {
    129            DOOR_REPORT_CMD_ID
    130          };
    131          
    132          // Define SimpleDescriptor for Sensor device

   \                                 In  segment XDATA_ROM_C, align 1
    133          const SimpleDescriptionFormat_t zb_SimpleDesc =
   \                     zb_SimpleDesc:
   \   000000   02           DB 2
   \   000001   200F         DW 3872
   \   000003   0100         DW 1
   \   000005   01           DB 1
   \   000006   01           DB 1
   \   000007   ....         DW zb_InCmdList
   \   000009   01           DB 1
   \   00000A   ....         DW zb_OutCmdList
    134          {
    135            MY_ENDPOINT_ID,             //  Endpoint
    136            MY_PROFILE_ID,              //  Profile ID
    137            DEV_ID_SENSOR,              //  Device ID
    138            DEVICE_VERSION_SENSOR,      //  Device Version
    139            0,                          //  Reserved
    140            NUM_IN_CMD_SENSOR,          //  Number of Input Commands
    141            (cId_t *) zb_InCmdList,             //  Input Command List
    142            NUM_OUT_CMD_SENSOR,         //  Number of Output Commands
    143            (cId_t *) zb_OutCmdList     //  Output Command List
    144          };
    145          
    146          /******************************************************************************
    147           * LOCAL FUNCTIONS
    148           */
    149          
    150          void uartRxCB( uint8 port, uint8 event );
    151          static void sendReport(void);
    152          static int8 readTemp(void);
    153          static uint8 readVoltage(void);
    154          
    155          /*****************************************************************************
    156           * @fn          zb_HandleOsalEvent
    157           *
    158           * @brief       The zb_HandleOsalEvent function is called by the operating
    159           *              system when a task event is set
    160           *
    161           * @param       event - Bitmask containing the events that have been set
    162           *
    163           * @return      none
    164           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    165          void zb_HandleOsalEvent( uint16 event )
   \                     zb_HandleOsalEvent:
    166          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
    167            if( event & SYS_EVENT_MSG )
    168            {
    169            }
    170          
    171            if( event & ZB_ENTRY_EVENT )
   \   000008   5410         ANL     A,#0x10
   \   00000A   6013         JZ      ??zb_HandleOsalEvent_0
    172            {
    173              // blind LED 1 to indicate joining a network
    174              HalLedBlink ( HAL_LED_1, 0, 50, 500 );
   \   00000C                ; Setup parameters for call to function HalLedBlink
   \   00000C   7CF4         MOV     R4,#-0xc
   \   00000E   7D01         MOV     R5,#0x1
   \   000010   7B32         MOV     R3,#0x32
   \   000012   7A00         MOV     R2,#0x0
   \   000014   7901         MOV     R1,#0x1
   \   000016   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    175              MCU_IO_DIR_OUTPUT(1, 2); // 
   \   000019   43FE04       ORL     0xfe,#0x4
    176              // Start the device
    177              zb_StartRequest();
   \   00001C                ; Setup parameters for call to function zb_StartRequest
   \   00001C   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
    178            }
    179          
    180            if ( event & MY_START_EVT )
   \                     ??zb_HandleOsalEvent_0:
   \   00001F   EE           MOV     A,R6
   \   000020   A2E0         MOV     C,0xE0 /* A   */.0
   \   000022   5003         JNC     ??zb_HandleOsalEvent_1
    181            {
    182              zb_StartRequest();
   \   000024                ; Setup parameters for call to function zb_StartRequest
   \   000024   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
    183            }
    184          
    185            if ( event & MY_REPORT_EVT )
   \                     ??zb_HandleOsalEvent_1:
   \   000027   EE           MOV     A,R6
   \   000028   5402         ANL     A,#0x2
   \   00002A   604C         JZ      ??zb_HandleOsalEvent_2
    186            {
    187              if ( appState == APP_REPORT )
   \   00002C   90....       MOV     DPTR,#appState
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6404         XRL     A,#0x4
   \   000032   7044         JNZ     ??zb_HandleOsalEvent_2
    188              {
    189                static int8 oldValue;
    190                int8 newValue = readTemp();
   \   000034                ; Setup parameters for call to function readTemp
   \   000034   12....       LCALL   `??readTemp::?relay` ; Banked call to: readTemp
   \   000037   E9           MOV     A,R1
   \   000038   F5..         MOV     ?V0,A
    191                if(oldValue != newValue || counter == 11){
   \   00003A   90....       MOV     DPTR,#??oldValue
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   65..         XRL     A,?V0
   \   000040   7008         JNZ     ??zb_HandleOsalEvent_3
   \   000042   90....       MOV     DPTR,#counter
   \   000045   E0           MOVX    A,@DPTR
   \   000046   640B         XRL     A,#0xb
   \   000048   7008         JNZ     ??zb_HandleOsalEvent_4
    192                  sendReport();
   \                     ??zb_HandleOsalEvent_3:
   \   00004A                ; Setup parameters for call to function sendReport
   \   00004A   12....       LCALL   `??sendReport::?relay`; Banked call to: sendReport
    193                  counter = 0;
   \   00004D   90....       MOV     DPTR,#counter
   \   000050   E4           CLR     A
   \   000051   F0           MOVX    @DPTR,A
    194                }
    195                oldValue = newValue;
   \                     ??zb_HandleOsalEvent_4:
   \   000052   E5..         MOV     A,?V0
   \   000054   90....       MOV     DPTR,#??oldValue
   \   000057   F0           MOVX    @DPTR,A
    196                counter++;
   \   000058   90....       MOV     DPTR,#counter
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   04           INC     A
   \   00005D   F0           MOVX    @DPTR,A
    197                osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myReportPeriod );
   \   00005E                ; Setup parameters for call to function osal_start_timerEx
   \   00005E   90....       MOV     DPTR,#myReportPeriod
   \   000061   12....       LCALL   ?Subroutine4 & 0xFFFF
    198              }
    199            }
   \                     ??CrossCallReturnLabel_0:
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000067   7A02         MOV     R2,#0x2
   \   000069   7B00         MOV     R3,#0x0
   \   00006B   90....       MOV     DPTR,#sapi_TaskID
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F9           MOV     R1,A
   \   000070   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000073   7404         MOV     A,#0x4
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
    200          
    201            if ( event & MY_FIND_COLLECTOR_EVT )
   \                     ??zb_HandleOsalEvent_2:
   \   000078   EE           MOV     A,R6
   \   000079   5404         ANL     A,#0x4
   \   00007B   6028         JZ      ??zb_HandleOsalEvent_5
    202            {
    203              // Delete previous binding
    204              if ( appState == APP_REPORT )
   \   00007D   90....       MOV     DPTR,#appState
   \   000080   E0           MOVX    A,@DPTR
   \   000081   6404         XRL     A,#0x4
   \   000083   700D         JNZ     ??zb_HandleOsalEvent_6
    205              {
    206                zb_BindDevice( FALSE, DOOR_BUTTON_CMD_ID, (uint8 *)NULL );
   \   000085                ; Setup parameters for call to function zb_BindDevice
   \   000085   7C00         MOV     R4,#0x0
   \   000087   7D00         MOV     R5,#0x0
   \   000089   7A04         MOV     R2,#0x4
   \   00008B   7B00         MOV     R3,#0x0
   \   00008D   7900         MOV     R1,#0x0
   \   00008F   12....       LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
    207              }
    208          
    209              appState = APP_BIND;
   \                     ??zb_HandleOsalEvent_6:
   \   000092   90....       MOV     DPTR,#appState
   \   000095   7402         MOV     A,#0x2
   \   000097   F0           MOVX    @DPTR,A
    210          
    211              // Find and bind to a collector device
    212              zb_BindDevice( TRUE, DOOR_BUTTON_CMD_ID, (uint8 *)NULL );
   \   000098                ; Setup parameters for call to function zb_BindDevice
   \   000098   7C00         MOV     R4,#0x0
   \   00009A   7D00         MOV     R5,#0x0
   \   00009C   7A04         MOV     R2,#0x4
   \   00009E   7B00         MOV     R3,#0x0
   \   0000A0   7901         MOV     R1,#0x1
   \   0000A2   12....       LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
    213            }
    214          }
   \                     ??zb_HandleOsalEvent_5:
   \   0000A5                REQUIRE ?Subroutine0
   \   0000A5                REQUIRE P1DIR
   \   0000A5                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   E4           CLR     A
   \   000008   F5..         MOV     ?V2,A
   \   00000A   F5..         MOV     ?V3,A
   \   00000C   78..         MOV     R0,#?V0
   \   00000E   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??oldValue:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    215          
    216          /******************************************************************************
    217           * @fn      zb_HandleKeys
    218           *
    219           * @brief   Handles all key events for this device.
    220           *
    221           * @param   shift - true if in shift/alt.
    222           * @param   keys - bit field for key events. Valid entries:
    223           *                 EVAL_SW4
    224           *                 EVAL_SW3
    225           *                 EVAL_SW2
    226           *                 EVAL_SW1
    227           *
    228           * @return  none
    229           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    230          void zb_HandleKeys( uint8 shift, uint8 keys )
   \                     zb_HandleKeys:
    231          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    232            // Shift is used to make each button/switch dual purpose.
    233            if ( shift )
   \   000009   EE           MOV     A,R6
   \   00000A   7031         JNZ     ??zb_HandleKeys_0
    234            {
    235              if ( keys & HAL_KEY_SW_1 )
    236              {
    237              }
    238              if ( keys & HAL_KEY_SW_2 )
    239              {
    240              }
    241              if ( keys & HAL_KEY_SW_3 )
    242              {
    243              }
    244              if ( keys & HAL_KEY_SW_4 )
    245              {
    246              }
    247            }
    248            else
    249            {
    250              if ( keys & HAL_KEY_SW_1 )
   \   00000C   EF           MOV     A,R7
   \   00000D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000F   5024         JNC     ??zb_HandleKeys_1
    251              {
    252                // Start reporting
    253                if ( reportState == FALSE ) {
   \   000011   90....       MOV     DPTR,#reportState
   \   000014   E0           MOVX    A,@DPTR
   \   000015   701E         JNZ     ??zb_HandleKeys_1
    254                  osal_set_event( sapi_TaskID, MY_REPORT_EVT );
   \   000017                ; Setup parameters for call to function osal_set_event
   \   000017   7A02         MOV     R2,#0x2
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   90....       MOV     DPTR,#sapi_TaskID
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    255                  reportState = TRUE;
   \   000023   90....       MOV     DPTR,#reportState
   \   000026   7401         MOV     A,#0x1
   \   000028   F0           MOVX    @DPTR,A
    256          
    257                  //  LED 2 to indicate reporting
    258                  HalLedBlink ( HAL_LED_2, 0, 50, 500 );
   \   000029                ; Setup parameters for call to function HalLedBlink
   \   000029   7CF4         MOV     R4,#-0xc
   \   00002B   FD           MOV     R5,A
   \   00002C   7B32         MOV     R3,#0x32
   \   00002E   7A00         MOV     R2,#0x0
   \   000030   7902         MOV     R1,#0x2
   \   000032   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    259                }
    260              }
    261              if ( keys & HAL_KEY_SW_2 )
   \                     ??zb_HandleKeys_1:
   \   000035   EF           MOV     A,R7
   \   000036   A2E1         MOV     C,0xE0 /* A   */.1
   \   000038   5003         JNC     ??zb_HandleKeys_0
    262              {
    263                  sendReport();
   \   00003A                ; Setup parameters for call to function sendReport
   \   00003A   12....       LCALL   `??sendReport::?relay`; Banked call to: sendReport
    264              }
    265              if ( keys & HAL_KEY_SW_3 )
    266              {
    267              }
    268              if ( keys & HAL_KEY_SW_4 )
    269              {
    270              }
    271            }
    272          }
   \                     ??zb_HandleKeys_0:
   \   00003D                REQUIRE ?Subroutine1
   \   00003D                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    273          
    274          /******************************************************************************
    275           * @fn          zb_StartConfirm
    276           *
    277           * @brief       The zb_StartConfirm callback is called by the ZigBee stack
    278           *              after a start request operation completes
    279           *
    280           * @param       status - The status of the start operation.  Status of
    281           *                       ZB_SUCCESS indicates the start operation completed
    282           *                       successfully.  Else the status is an error code.
    283           *
    284           * @return      none
    285           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    286          void zb_StartConfirm( uint8 status )
   \                     zb_StartConfirm:
    287          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    288            // If the device sucessfully started, change state to running
    289            if ( status == ZB_SUCCESS )
   \   000006   7022         JNZ     ??zb_StartConfirm_0
    290            {
    291              // Change application state
    292              appState = APP_START;
   \   000008   90....       MOV     DPTR,#appState
   \   00000B   7401         MOV     A,#0x1
   \   00000D   F0           MOVX    @DPTR,A
    293          
    294              // Set LED 1 to indicate that node is operational on the network
    295              HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
   \   00000E                ; Setup parameters for call to function HalLedSet
   \   00000E   FA           MOV     R2,A
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    296          
    297              // Store parent short address
    298              zb_GetDeviceInfo(ZB_INFO_PARENT_SHORT_ADDR, &parentShortAddr);
   \   000013                ; Setup parameters for call to function zb_GetDeviceInfo
   \   000013   7A..         MOV     R2,#parentShortAddr & 0xff
   \   000015   7B..         MOV     R3,#(parentShortAddr >> 8) & 0xff
   \   000017   7903         MOV     R1,#0x3
   \   000019   12....       LCALL   `??zb_GetDeviceInfo::?relay`; Banked call to: zb_GetDeviceInfo
    299          
    300              // Set event to bind to a collector
    301              osal_set_event( sapi_TaskID, MY_FIND_COLLECTOR_EVT );
   \   00001C                ; Setup parameters for call to function osal_set_event
   \   00001C   7A04         MOV     R2,#0x4
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   90....       MOV     DPTR,#sapi_TaskID
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000028   8023         SJMP    ??zb_StartConfirm_1
    302            }
    303            else
    304            {
    305              // Try again later with a delay
    306              osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
   \                     ??zb_StartConfirm_0:
   \   00002A                ; Setup parameters for call to function osal_start_timerEx
   \   00002A   90....       MOV     DPTR,#myStartRetryDelay
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V0,A
   \   000030   E4           CLR     A
   \   000031   F5..         MOV     ?V1,A
   \   000033   F5..         MOV     ?V2,A
   \   000035   F5..         MOV     ?V3,A
   \   000037   78..         MOV     R0,#?V0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00003C   7A01         MOV     R2,#0x1
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   90....       MOV     DPTR,#sapi_TaskID
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F9           MOV     R1,A
   \   000045   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000048   7404         MOV     A,#0x4
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
    307            }
    308          }
   \                     ??zb_StartConfirm_1:
   \   00004D   02....       LJMP    ?Subroutine0 & 0xFFFF
    309          
    310          /******************************************************************************
    311           * @fn          zb_SendDataConfirm
    312           *
    313           * @brief       The zb_SendDataConfirm callback function is called by the
    314           *              ZigBee after a send data operation completes
    315           *
    316           * @param       handle - The handle identifying the data transmission.
    317           *              status - The status of the operation.
    318           *
    319           * @return      none
    320           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    321          void zb_SendDataConfirm( uint8 handle, uint8 status )
   \                     zb_SendDataConfirm:
    322          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    323            if(status != ZB_SUCCESS)
   \   000006   6029         JZ      ??zb_SendDataConfirm_0
    324            {
    325              if ( ++reportFailureNr >= REPORT_FAILURE_LIMIT )
   \   000008   90....       MOV     DPTR,#reportFailureNr
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   04           INC     A
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   C3           CLR     C
   \   00000F   9404         SUBB    A,#0x4
   \   000011   4023         JC      ??zb_SendDataConfirm_1
    326              {
    327                 // Stop reporting
    328                 osal_stop_timerEx( sapi_TaskID, MY_REPORT_EVT );
   \   000013                ; Setup parameters for call to function osal_stop_timerEx
   \   000013   7A02         MOV     R2,#0x2
   \   000015   7B00         MOV     R3,#0x0
   \   000017   90....       MOV     DPTR,#sapi_TaskID
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
    329          
    330                 // After failure start reporting automatically when the device
    331                 // is binded to a new gateway
    332                 reportState = TRUE;
   \   00001F   90....       MOV     DPTR,#reportState
   \   000022   7401         MOV     A,#0x1
   \   000024   F0           MOVX    @DPTR,A
    333          
    334                 // Try binding to a new gateway
    335                 osal_set_event( sapi_TaskID, MY_FIND_COLLECTOR_EVT );
   \   000025                ; Setup parameters for call to function osal_set_event
   \   000025   7A04         MOV     R2,#0x4
   \   000027   7B00         MOV     R3,#0x0
   \   000029   90....       MOV     DPTR,#sapi_TaskID
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    336                 reportFailureNr = 0;
    337              }
    338            }
    339            // status == SUCCESS
    340            else
    341            {
    342              // Reset failure counter
    343              reportFailureNr = 0;
   \                     ??zb_SendDataConfirm_0:
   \   000031   90....       MOV     DPTR,#reportFailureNr
   \   000034   E4           CLR     A
   \   000035   F0           MOVX    @DPTR,A
    344            }
    345          }
   \                     ??zb_SendDataConfirm_1:
   \   000036   02....       LJMP    ?Subroutine1 & 0xFFFF
    346          
    347          /******************************************************************************
    348           * @fn          zb_BindConfirm
    349           *
    350           * @brief       The zb_BindConfirm callback is called by the ZigBee stack
    351           *              after a bind operation completes.
    352           *
    353           * @param       commandId - The command ID of the binding being confirmed.
    354           *              status - The status of the bind operation.
    355           *
    356           * @return      none
    357           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    358          void zb_BindConfirm( uint16 commandId, uint8 status )
   \                     zb_BindConfirm:
    359          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    360            if( status == ZB_SUCCESS )
   \   000006   7033         JNZ     ??zb_BindConfirm_0
    361            {
    362              appState = APP_REPORT;
   \   000008   90....       MOV     DPTR,#appState
   \   00000B   7404         MOV     A,#0x4
   \   00000D   F0           MOVX    @DPTR,A
    363          
    364              HalLedSet( HAL_LED_3, HAL_LED_MODE_OFF );
   \   00000E                ; Setup parameters for call to function HalLedSet
   \   00000E   7A00         MOV     R2,#0x0
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    365              HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
   \   000014                ; Setup parameters for call to function HalLedSet
   \   000014   7A00         MOV     R2,#0x0
   \   000016   7901         MOV     R1,#0x1
   \   000018   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    366              HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
   \   00001B                ; Setup parameters for call to function HalLedSet
   \   00001B   7A01         MOV     R2,#0x1
   \   00001D   7902         MOV     R1,#0x2
   \   00001F   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    367              zb_AllowBind( 0xFF );
   \   000022                ; Setup parameters for call to function zb_AllowBind
   \   000022   79FF         MOV     R1,#-0x1
   \   000024   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    368              
    369              // After failure reporting start automatically when the device
    370              // is binded to a new gateway
    371              if ( reportState )
   \   000027   90....       MOV     DPTR,#reportState
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6028         JZ      ??zb_BindConfirm_1
    372              {
    373                // Start reporting
    374                osal_set_event( sapi_TaskID, MY_REPORT_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   7A02         MOV     R2,#0x2
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   90....       MOV     DPTR,#sapi_TaskID
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000039   801A         SJMP    ??zb_BindConfirm_1
    375              }
    376            }
    377            else
    378            {
    379              osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
   \                     ??zb_BindConfirm_0:
   \   00003B                ; Setup parameters for call to function osal_start_timerEx
   \   00003B   90....       MOV     DPTR,#myBindRetryDelay
   \   00003E   12....       LCALL   ?Subroutine4 & 0xFFFF
    380            }
   \                     ??CrossCallReturnLabel_1:
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000044   7A04         MOV     R2,#0x4
   \   000046   7B00         MOV     R3,#0x0
   \   000048   90....       MOV     DPTR,#sapi_TaskID
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000050   7404         MOV     A,#0x4
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
    381          }
   \                     ??zb_BindConfirm_1:
   \   000055   02....       LJMP    ?Subroutine0 & 0xFFFF
    382          
    383          /******************************************************************************
    384           * @fn          zb_AllowBindConfirm
    385           *
    386           * @brief       Indicates when another device attempted to bind to this device
    387           *
    388           * @param
    389           *
    390           * @return      none
    391           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    392          void zb_AllowBindConfirm( uint16 source )
   \                     zb_AllowBindConfirm:
    393          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    394            HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
   \   000004                ; Setup parameters for call to function HalLedSet
   \   000004   7A01         MOV     R2,#0x1
   \   000006   7902         MOV     R1,#0x2
   \   000008   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
    395            (void)source;
    396          }
   \   00000B                REQUIRE ?Subroutine2
   \   00000B                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    397          
    398          /******************************************************************************
    399           * @fn          zb_FindDeviceConfirm
    400           *
    401           * @brief       The zb_FindDeviceConfirm callback function is called by the
    402           *              ZigBee stack when a find device operation completes.
    403           *
    404           * @param       searchType - The type of search that was performed.
    405           *              searchKey - Value that the search was executed on.
    406           *              result - The result of the search.
    407           *
    408           * @return      none
    409           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    410          void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
   \                     zb_FindDeviceConfirm:
    411          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    412            (void)searchType;
    413            (void)searchKey;
    414            (void)result;
    415          }
   \   000000   02....       LJMP    ?BRET
    416          
    417          /******************************************************************************
    418           * @fn          zb_ReceiveDataIndication
    419           *
    420           * @brief       The zb_ReceiveDataIndication callback function is called
    421           *              asynchronously by the ZigBee stack to notify the application
    422           *              when data is received from a peer device.
    423           *
    424           * @param       source - The short address of the peer device that sent the data
    425           *              command - The commandId associated with the data
    426           *              len - The number of bytes in the pData parameter
    427           *              pData - The data sent by the peer device
    428           *
    429           * @return      none
    430           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    431          void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
   \                     zb_ReceiveDataIndication:
    432          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    433            (void)source;
    434            (void)command;
    435            (void)len;
    436            (void)pData;
    437            static int doorState = 0;
    438            if(command == DOOR_REPORT_CMD_ID){
   \   000004   7403         MOV     A,#0x3
   \   000006   6C           XRL     A,R4
   \   000007   4D           ORL     A,R5
   \   000008   7021         JNZ     ??zb_ReceiveDataIndication_0
    439              if(doorState){
   \   00000A   90....       MOV     DPTR,#??doorState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   E8           MOV     A,R0
   \   000013   49           ORL     A,R1
   \   000014   600A         JZ      ??zb_ReceiveDataIndication_1
    440                  MCU_IO_SET_LOW(1, 2);
   \   000016   C292         CLR     0x90.2
    441                  doorState = 0;
   \   000018   90....       MOV     DPTR,#??doorState
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   800A         SJMP    ??zb_ReceiveDataIndication_2
    442              }
    443              else{
    444                  MCU_IO_SET_HIGH(1, 2);
   \                     ??zb_ReceiveDataIndication_1:
   \   000020   D292         SETB    0x90.2
    445                  doorState = 1;
   \   000022   90....       MOV     DPTR,#??doorState
   \   000025   7401         MOV     A,#0x1
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   E4           CLR     A
   \                     ??zb_ReceiveDataIndication_2:
   \   00002A   F0           MOVX    @DPTR,A
    446              }
    447            }
    448          }
   \                     ??zb_ReceiveDataIndication_0:
   \   00002B   80..         SJMP    ?Subroutine2
   \   00002D                REQUIRE _A_P1

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??doorState:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    449          
    450          /******************************************************************************
    451           * @fn          uartRxCB
    452           *
    453           * @brief       Callback function for UART
    454           *
    455           * @param       port - UART port
    456           *              event - UART event that caused callback
    457           *
    458           * @return      none
    459           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    460          void uartRxCB( uint8 port, uint8 event )
   \                     uartRxCB:
    461          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    462            (void)port;
    463            (void)event;
    464          }
   \   000000   02....       LJMP    ?BRET
    465          
    466          /******************************************************************************
    467           * @fn          sendReport
    468           *
    469           * @brief       Send sensor report
    470           *
    471           * @param       none
    472           *
    473           * @return      none
    474           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    475          static void sendReport(void)
   \                     sendReport:
    476          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    477            uint8 pData[SENSOR_REPORT_LENGTH];
                         ^
Warning[Pe550]: variable "pData" was set but never used
    478            static uint8 reportNr = 0;
    479            uint8 txOptions;
                         ^
Warning[Pe550]: variable "txOptions" was set but never used
    480          
    481            // Read and report temperature value
    482            pData[SENSOR_TEMP_OFFSET] = readTemp();
   \   000005                ; Setup parameters for call to function readTemp
   \   000005   12....       LCALL   `??readTemp::?relay` ; Banked call to: readTemp
    483          
    484            // Read and report voltage value
    485            pData[SENSOR_VOLTAGE_OFFSET] = readVoltage();
   \   000008                ; Setup parameters for call to function HalReadTemp
   \   000008   12....       LCALL   `??HalReadTemp::?relay`; Banked call to: HalReadTemp
    486          
    487            pData[SENSOR_PARENT_OFFSET] =  HI_UINT16(parentShortAddr);
    488            pData[SENSOR_PARENT_OFFSET + 1] =  LO_UINT16(parentShortAddr);
    489          
    490            // Set ACK request on each ACK_INTERVAL report
    491            // If a report failed, set ACK request on next report
    492            if ( ++reportNr<ACK_REQ_INTERVAL && reportFailureNr == 0 )
   \   00000B   90....       MOV     DPTR,#??reportNr
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   04           INC     A
   \   000010   F0           MOVX    @DPTR,A
   \   000011   C3           CLR     C
   \   000012   9405         SUBB    A,#0x5
   \   000014   5006         JNC     ??sendReport_0
   \   000016   90....       MOV     DPTR,#reportFailureNr
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6005         JZ      ??sendReport_1
    493            {
    494              txOptions = AF_TX_OPTIONS_NONE;
    495            }
    496            else
    497            {
    498              txOptions = AF_MSG_ACK_REQUEST;
    499              reportNr = 0;
   \                     ??sendReport_0:
   \   00001C   90....       MOV     DPTR,#??reportNr
   \   00001F   E4           CLR     A
   \   000020   F0           MOVX    @DPTR,A
    500            }
    501            // Destination address 0xFFFE: Destination address is sent to previously
    502            // established binding for the commandId.
    503            zb_SendDataRequest( 0xFFFE, DOOR_BUTTON_CMD_ID, 0, NULL, 0, NULL, 0 );
   \                     ??sendReport_1:
   \   000021                ; Setup parameters for call to function zb_SendDataRequest
   \   000021   75..00       MOV     ?V0,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000033   E4           CLR     A
   \   000034   F5..         MOV     ?V1,A
   \   000036   78..         MOV     R0,#?V0
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   7900         MOV     R1,#0x0
   \   00003D   7C04         MOV     R4,#0x4
   \   00003F   7D00         MOV     R5,#0x0
   \   000041   7AFE         MOV     R2,#-0x2
   \   000043   7BFF         MOV     R3,#-0x1
   \   000045   12....       LCALL   `??zb_SendDataRequest::?relay`; Banked call to: zb_SendDataRequest
   \   000048   7405         MOV     A,#0x5
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
    504          }
   \   00004D                REQUIRE ?Subroutine3
   \   00004D                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??reportNr:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    505          
    506          /******************************************************************************
    507           * @fn          readTemp
    508           *
    509           * @brief       read temperature from ADC
    510           *
    511           * @param       none
    512           *
    513           * @return      temperature
    514           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    515          static int8 readTemp(void)
   \                     readTemp:
    516          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    517            static uint16 voltageAtTemp22;
    518            static uint8 bCalibrate = TRUE; // Calibrate the first time the temp sensor is read
    519            uint16 value;
    520            int8 temp;
    521          
    522            #if defined (HAL_MCU_CC2530)
    523            /*
    524             * Use the ADC to read the temperature
    525             */
    526            value = HalReadTemp();
   \   000005                ; Setup parameters for call to function HalReadTemp
   \   000005   12....       LCALL   `??HalReadTemp::?relay`; Banked call to: HalReadTemp
   \   000008   8A..         MOV     ?V0,R2
   \   00000A   8B..         MOV     ?V1,R3
    527          
    528            // Use the 12 MSB of adcValue
    529            value >>= 4;
   \   00000C   7404         MOV     A,#0x4
   \   00000E   78..         MOV     R0,#?V0
   \   000010   12....       LCALL   ?US_SHR
   \   000013   A8..         MOV     R0,?V0
   \   000015   A9..         MOV     R1,?V1
    530          
    531            /*
    532             * These parameters are typical values and need to be calibrated
    533             * See the datasheet for the appropriate chip for more details
    534             * also, the math below may not be very accurate
    535             */
    536            /* Assume ADC = 1480 at 25C and ADC = 4/C */
    537            #define VOLTAGE_AT_TEMP_25        1480
    538            #define TEMP_COEFFICIENT          4
    539          
    540            // Calibrate for 22C the first time the temp sensor is read.
    541            // This will assume that the demo is started up in temperature of 22C
    542            if ( bCalibrate ) {
   \   000017   90....       MOV     DPTR,#??bCalibrate
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   600D         JZ      ??readTemp_0
    543              voltageAtTemp22 = value;
   \   00001D   90....       MOV     DPTR,#??voltageAtTemp22
   \   000020   E8           MOV     A,R0
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   E9           MOV     A,R1
   \   000024   F0           MOVX    @DPTR,A
    544              bCalibrate = FALSE;
   \   000025   90....       MOV     DPTR,#??bCalibrate
   \   000028   E4           CLR     A
   \   000029   F0           MOVX    @DPTR,A
    545            }
    546          
    547            temp = 22 + ( (value - voltageAtTemp22) / TEMP_COEFFICIENT );
   \                     ??readTemp_0:
   \   00002A   90....       MOV     DPTR,#??voltageAtTemp22
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   FA           MOV     R2,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   FB           MOV     R3,A
   \   000032   E8           MOV     A,R0
   \   000033   C3           CLR     C
   \   000034   9A           SUBB    A,R2
   \   000035   F5..         MOV     ?V0,A
   \   000037   E9           MOV     A,R1
   \   000038   9B           SUBB    A,R3
   \   000039   F5..         MOV     ?V1,A
   \   00003B   7402         MOV     A,#0x2
   \   00003D   78..         MOV     R0,#?V0
   \   00003F   12....       LCALL   ?US_SHR
   \   000042   E5..         MOV     A,?V0
   \   000044   2416         ADD     A,#0x16
   \   000046   F9           MOV     R1,A
    548          
    549            // Set 0C as minimum temperature, and 100C as max
    550            if ( temp >= 100 )
   \   000047   C3           CLR     C
   \   000048   9464         SUBB    A,#0x64
   \   00004A   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00004C   65D0         XRL     A,PSW
   \   00004E   33           RLC     A
   \   00004F   4004         JC      ??readTemp_1
    551            {
    552              return 100;
   \   000051   7964         MOV     R1,#0x64
   \   000053   800D         SJMP    ??readTemp_2
    553            }
    554            else if ( temp <= 0 ) {
   \                     ??readTemp_1:
   \   000055   E9           MOV     A,R1
   \   000056   C3           CLR     C
   \   000057   9401         SUBB    A,#0x1
   \   000059   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00005B   65D0         XRL     A,PSW
   \   00005D   33           RLC     A
   \   00005E   5002         JNC     ??readTemp_2
    555              return 0;
   \   000060   7900         MOV     R1,#0x0
    556            }
    557            else {
    558              return temp;
   \                     ??readTemp_2:
   \   000062   80..         SJMP    ?Subroutine3
    559            }
    560            // Only CC2530 is supported
    561            #else
    562            return 0;
    563            #endif
    564          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??voltageAtTemp22:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??bCalibrate:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for bCalibrate>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myReportPeriod>`:
   \   000000   8813         DW 5000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myBindRetryDelay>`:
   \   000000   D007         DW 2000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myStartRetryDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for bCalibrate>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleOsalEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleOsalEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_StartConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_SendDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SendDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_BindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_AllowBindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_FindDeviceConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_ReceiveDataIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReceiveDataIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uartRxCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uartRxCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??sendReport::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sendReport

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??readTemp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    readTemp
    565          
    566          /******************************************************************************
    567           * @fn          readVoltage
    568           *
    569           * @brief       read voltage from ADC
    570           *
    571           * @param       none
    572           *
    573           * @return      voltage
    574           */
    575          static uint8 readVoltage(void)
    576          {
    577            #if defined (HAL_MCU_CC2530)
    578            /*
    579             * Use the ADC to read the bus voltage
    580             */
    581            uint16 value = HalReadTemp();
    582          
    583            // value now contains measurement of Vdd/3
    584            // 0 indicates 0V and 32767 indicates 1.25V
    585            // voltage = (value*3*1.25)/32767 volts
    586            // we will multiply by this by 10 to allow units of 0.1 volts
    587            value = value >> 6;   // divide first by 2^6
    588            value = (uint16)(value * 37.5);
    589            value = value >> 9;   // ...and later by 2^9...to prevent overflow during multiplication
    590          
    591            return value;
    592            #else
    593            return 0;
    594            #endif // CC2530
    595          }

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     22   readTemp
        0     10   -> HalReadTemp
      0     27   sendReport
        0     10   -> HalReadTemp
        0     10   -> readTemp
        0     15   -> zb_SendDataRequest
      0      0   uartRxCB
      2      0   zb_AllowBindConfirm
        2      0   -> HalLedSet
      0     16   zb_BindConfirm
        0     12   -> HalLedSet
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
        0     12   -> zb_AllowBind
      0      0   zb_FindDeviceConfirm
      0      9   zb_HandleKeys
        0      9   -> HalLedBlink
        0      9   -> osal_set_event
        0      9   -> sendReport
      0     16   zb_HandleOsalEvent
        0     12   -> HalLedBlink
        0     16   -> osal_start_timerEx
        0     12   -> readTemp
        0     12   -> sendReport
        0     12   -> zb_BindDevice
        0     12   -> zb_StartRequest
      2      4   zb_ReceiveDataIndication
      0      9   zb_SendDataConfirm
        0      9   -> osal_set_event
        0      9   -> osal_stop_timerEx
      0     16   zb_StartConfirm
        0     12   -> HalLedSet
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
        0     12   -> zb_GetDeviceInfo


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for bCalibrate>
       2  ?<Initializer for myBindRetryDelay>
       2  ?<Initializer for myReportPeriod>
       1  ?<Initializer for myStartRetryDelay>
       5  ?Subroutine0
       5  ?Subroutine1
       7  ?Subroutine2
       5  ?Subroutine3
      15  ?Subroutine4
       1  P1DIR
       1  _A_P1
       1  appState
       1  bCalibrate
       1  counter
       2  doorState
       2  myBindRetryDelay
       2  myReportPeriod
       1  myStartRetryDelay
       1  oldValue
       2  parentShortAddr
     100  readTemp
       6  readTemp::?relay
       1  reportFailureNr
       1  reportNr
       1  reportState
      77  sendReport
       6  sendReport::?relay
       3  uartRxCB
       6  uartRxCB::?relay
       2  voltageAtTemp22
      11  zb_AllowBindConfirm
       6  zb_AllowBindConfirm::?relay
      88  zb_BindConfirm
       6  zb_BindConfirm::?relay
       3  zb_FindDeviceConfirm
       6  zb_FindDeviceConfirm::?relay
      61  zb_HandleKeys
       6  zb_HandleKeys::?relay
     165  zb_HandleOsalEvent
       6  zb_HandleOsalEvent::?relay
       2  zb_InCmdList
       2  zb_OutCmdList
      45  zb_ReceiveDataIndication
       6  zb_ReceiveDataIndication::?relay
      57  zb_SendDataConfirm
       6  zb_SendDataConfirm::?relay
      12  zb_SimpleDesc
      80  zb_StartConfirm
       6  zb_StartConfirm::?relay

 
 727 bytes in segment BANKED_CODE
  66 bytes in segment BANK_RELAYS
   2 bytes in segment SFR_AN
   6 bytes in segment XDATA_I
   6 bytes in segment XDATA_ID
  16 bytes in segment XDATA_ROM_C
  12 bytes in segment XDATA_Z
 
 799 bytes of CODE  memory
  16 bytes of CONST memory
   0 bytes of DATA  memory (+ 2 bytes shared)
  18 bytes of XDATA memory

Errors: none
Warnings: 2
